<?php

/**
 * @file
 * TODO: write description.
 */

/**
 * Implementation of hook_menu()
 */
function prim_teacher_result_permission () {
  return array(
    'view teacher result tab' => array(
      'title' => t('View teacher result tab'), 
      'description' => t('Shows the teacher result tab.'),
      'restrict access' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_page_alter()
 */
function prim_teacher_result_page_alter(&$page){
   
  // Adds the text in field_result_info from the resultatrapport content type to Dina registreringar tab.
  if(arg(0) == 'node' && (arg(2) == 'webform-results' || arg(2) == 'prim-teacher-result')) {
    $node = node_load(arg(1));
    $items = field_get_items('node', $node, 'field_result_info', $node->language);
    if(isset($page['content']['system_main']['main']['#markup'])){
      $page['content']['system_main']['main']['#markup'] = '<div>'.$items[0]['value'] .'</div>'. $page['content']['system_main']['main']['#markup'];
    }    
    drupal_add_css(drupal_get_path('module','prim_teacher_result').'/css/prim_teacher_tweak_cck_download.css');
  }
  // Adds the text in field_download_info from the resultatrapport content type to Download tab. 
  if(arg(0) == 'node' && (arg(2) == 'download')) {
    $node = node_load(arg(1));
    $items = field_get_items('node', $node, 'field_download_info', $node->language);
    $page['content']['system_main']['format']['#title'] = '<div><span>'.$items[0]['value'] .'</span></div><br/>'. $page['content']['system_main']['format']['#title'];
    $page['content']['system_main']['main']['#weight'] = -10;
    drupal_add_css(drupal_get_path('module','prim_teacher_result').'/css/prim_teacher_tweak_cck_download.css');
    // Hide download options for teachers
    if(is_prim_teacher()) {
      drupal_add_css(drupal_get_path('module','prim_teacher_result').'/css/prim_teacher_hide_download.css');    
    }
  }

  // Remove print and PDF links for submissions
  if(arg(0)=='node'&& arg(2)=='submission'){
    unset($page['content']['system_main']['#submission_actions']);
  }
}

/**
 * Implementation of hook_menu_alter()
 */
/* We use jQuery instead see prim_teacher_result_node_view
function prim_teacher_result_menu_alter(&$items){
  $node = node_load(arg(1));
  $items['node/%node/view']['title'] = t('Ny registrering');
}
*/

/**
* Implementation of hook_webform_submission_load()
*/
function prim_teacher_result_webform_submission_load(&$submissions){
  //adds a jquery file that tweaks the submissions result table
  if (arg(0) == 'node' && arg(2) == 'prim-teacher-result'){    
    drupal_add_js(drupal_get_path('module','prim_teacher_result').'/js/prim_results_table_tweaks_teacher.js');  
  }
  elseif (arg(0) == 'node' &&  arg(2)=='webform-results'){
    drupal_add_js(drupal_get_path('module','prim_teacher_result').'/js/prim_results_table_tweaks_admin.js');  
  }
}

/**
 * Implementation of hook_theme()
 */
function prim_teacher_result_theme($existing, $type, $theme, $path) {
  return array(
    'prim_teacher_result_matrix' => array(
      'variables' => array('vars'=> NULL), 
      'template' => 'prim-teacher-result-matrix',
    ),
    'prim_teacher_result_questions' => array(
      'variables' => array('vars'=> NULL), 
      'template' => 'prim-teacher-result-questions',
    ),
    'teacher_results_submissions_header' => array(
      'variables' => array('node' => NULL),
      'file' => 'includes/teacher.report.inc',
    ),
    'teacher_results_submissions' => array(
      'variables' => array('node' => NULL, 'components' => NULL, 'submissions' => NULL, 'node' => NULL, 'total_count' => NULL, 'pager_count' => NULL),
      'file' => 'includes/teacher.report.inc',
    )
  );
}

/**
 * This function hides the teacher result tab for administrator and formuläradmin
 */
function teacher_results_access($node) {
  global $user;

  if(user_access('view teacher result tab') && $node->type == 'resultatrapport') {
    return TRUE;
  }
  return FALSE;
}

function is_prim_teacher() {
  global $user;

  if((!in_array('formuläradmin', $user->roles) && !in_array('administrator', $user->roles))) {
    return TRUE;
  }
  return FALSE;
}

function matrix_tab_access($node) {
  if ($node->type == 'resultatrapport') {
    return TRUE;
  }
  return FALSE;
}


/**
* Implementation of hook_init()
*/
function prim_teacher_result_init(){
  drupal_add_css(drupal_get_path('module','prim_teacher_result').'/css/prim_teacher_result.css');
  drupal_add_css(drupal_get_path('module','prim_teacher_result').'/css/prim_teacher_result_print.css',array('media'=>'print'));
}

/**
 * Implementation of hook_menu()
 */
function prim_teacher_result_menu() {
  $items['node/%webform_menu/prim-teacher-result'] = array(
    'title' => t('Dina registreringar'),
    'page callback' => 'teacher_results_submissions',
    'page arguments' => array(1, TRUE, '50'),
    'access callback' => 'teacher_results_access',
    'access arguments' => array(1),
    'file' => 'includes/teacher.report.inc',
    //'file path' => drupal_get_path('module', 'webform'),
    'weight' => 10,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_menu/download'] = array(
    'title' => t('Download'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('teacher_results_download_form', 1),
    'access arguments' => array('view teacher result tab'),
    'file' => 'includes/teacher.report.inc',
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_menu/submission/%webform_menu_submission/matrix'] = array(
    'title' => t('Visa matris'),
    'page callback' => 'student_matrix',
    'page arguments' => array(1),
    'access callback' => 'matrix_tab_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  $items['node/%webform_menu/submission/%webform_menu_submission/registrations'] = array(
    'title' => t('Dina registreringar'),
    'page callback' => 'back_to_list',
    'page arguments' => array(1),
    'access callback' => 'is_prim_teacher',
    //'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );
  return $items;
}


function back_to_list($node) {
  drupal_goto("node/$node->nid/prim-teacher-result");
}


/**
 * TODO: write description.
 * This function is not used currently.
 */
function teacher_results_table($node, $pager_count = 0) {
  global $user;

  if (isset($_GET['results']) && is_numeric($_GET['results'])) {
    $pager_count = $_GET['results'];
  }

  // Get all the submissions for the node for the current loged in user.
  $header = theme('teacher_results_table_header', array('node' => $node));
  $submissions = webform_get_submissions(array('nid' => $node->nid, 
                                               'uid' => $user->uid), $header, $pager_count);
  $total_count = webform_get_submission_count($node->nid);

  $output = theme('teacher_results_table', array('node' => $node,
                                                 'components' => $node->webform['components'], 
                                                 'submissions' => $submissions, 
                                                 'total_count' => $total_count, 
                                                 'pager_count' => $pager_count));
  if ($pager_count) {
    $output .= theme('pager');
  }
  return $output;
}

/**
 * Implementation of hook_form_alter()
 */
function prim_teacher_result_form_alter(&$form,&$form_state,$form_id){
   //this snippet adds the destination to the form action array value of the form but only if the destination is not provided. This action is applied only for webform_submission_delete form id. It fixes the bug of "Access denied" after deletion for authenticated users who delete the submission by going to view the submission first instead of delete the submission from the list
   if ($form_id == 'webform_submission_delete_form' && arg(0)=='node'){
     if(strpos($form['#action'],'&destination')===FALSE){$form['#action'] = $form['#action']."&destination=node/".arg(1)."/webform-results"; 
    }
  }
  // This will make IP-adress and Användar-ID unselected 
  if($form_id == 'teacher_results_download_form') {
    unset( $form['components']['#default_value'][5]);
    unset( $form['components']['#default_value'][6]); 
  }
  if($form_id == 'webform_components_form' && isset($form['add']['type']['#options'])){
    $form['add']['type']['#options']['date'] = 'Date';
    $form['add']['type']['#options']['email'] = 'E-mail';
    $form['add']['type']['#options']['fieldset'] = 'Fieldset';
    $form['add']['type']['#options']['file'] = 'File';
    $form['add']['type']['#options']['grid'] = 'Grid';
    $form['add']['type']['#options']['hidden'] = 'Hidden';
    $form['add']['type']['#options']['markup'] = 'Markup';
    $form['add']['type']['#options']['pagebreak'] = 'Pagebreak';
    $form['add']['type']['#options']['select'] = 'Select';
    $form['add']['type']['#options']['textarea'] = 'Textarea';
    $form['add']['type']['#options']['textfield'] = 'Textfield';
    $form['add']['type']['#options']['time'] = 'Time';
  }
 
  // This alter is only for node type "resultatrapport" and element type "select"
  // within the forms webform_component_edit_form and webform_component_add_form
  if(($form_id == 'webform_component_edit_form' || $form_id == 'webform_component_add_form') &&
      $form_state['build_info']['args'][0]->type == 'resultatrapport' &&
      $form_state['build_info']['args'][1]['type'] == 'select'){

    // Fetch prim_question checkbox status to $default
    if(arg(4) && arg(4) != 'new') {
      $extra = db_query(
        "SELECT extra FROM webform_component WHERE nid = :nid AND cid = :cid",
        array(':nid' => arg(1), ':cid' => arg(4))
      )->fetchField();

      $extra = unserialize($extra);
      if(isset($extra['prim_question']['check'])) {
        $default = $extra['prim_question']['check'];
      }
    }

    $form['extra']['prim_question']['check']=array(
      '#type' => 'checkbox',
      '#title' => t('Matris fråga'),
      '#description' => t('<b>"Customize keys (Advanced)"</b> måste vara i kryssad för att detta ska fungera.<br /> 
        <b>NYCKEL:</b> I detta fällt fylls betyg i detta skall vara en versal. Direkt efter betyget skrivs förkortningen 
        av en förmåga in med gemener. När dessa kryssas för kommer de att bli gröna i Matrisen. Man kan även ange 
        "Inget svar", "ej svar", "ingetsvar" eller "ejsvar" som nyckel dessa alternativ kommer att bli gråa i Matrisen 
        om de kryssas i. Om ett värde fylls i som inte har nämnts här ovan t.e.x fel eller 0p så kommer dessa visas som 
        vita i Matrisen, men <b>undvik att använda "0"</b> då detta kan bidra till problem.<br /> 
        <b>EXEMPEL PÅ NYCKLAR:</b> Ab, Epl, Cm, Bp. <br />
        VÄRDE: Detta fält kan fyllas i med vad som helst, fältet innehåller texten som kommer att visas för 
        användaren. <br />
        <b>EXEMPEL PÅ VÄRDEN:</b> Ab, 2poäng (Cpl+), op, Fel svar.'),
      '#default_value' => (isset($default) ? $default : 0), 
    );
  }
}

function student_matrix($node) {
  drupal_add_css(drupal_get_path('module', 'prim-teacher-result') . '/css/prim-teacher-result.css', array());

  $query = db_select('webform_component', 'c');
  $query
    ->join('webform_submitted_data', 'sd', 'c.cid = sd.cid AND c.nid = sd.nid AND sd.sid ='.arg(3));
  $query
    ->fields('c', array('nid', 'cid', 'pid', 'name','form_key', 'type', 'extra'))
    ->fields('sd', array('data'))
    ->condition('c.nid', arg(1), '=')
    ->condition('c.extra', '%prim_question";a:1:{s:5:"check";i:1;}%', 'LIKE')
    ->orderBy('c.cid', 'ASC');
  $result = $query->execute();


  $grades = array();
  $grades = init_grades($grades, 'all');
  $grades = init_grades($grades, 'correct');
  $grades = init_grades($grades, 'noanswer');
  $multiformkey = array();
  
  $cidquery = db_select('webform_submitted_data', 'sd');
  $cidquery
    ->fields('sd', array('cid'))
    ->condition('sd.nid', arg(1), '=')
    ->condition('sd.sid', arg(3), '=')
    ->orderBy('sd.cid', 'ASC');
  $cidresult = $cidquery->execute();

  $multiquery = db_select('webform_component', 'c');
  $multiquery
    ->fields('c', array('nid', 'cid', 'pid', 'name','form_key', 'type', 'extra'))
    ->condition('c.nid', arg(1), '=')
    ->condition('c.cid', $cidquery, 'NOT IN')
    ->condition('c.type', 'select', '=')
    ->orderBy('c.cid', 'ASC');
  $multiresult = $multiquery->execute();


  $grades = array();
  $grades = init_grades($grades, 'all');
  $grades = init_grades($grades, 'correct');
  $grades = init_grades($grades, 'noanswer');
  $multiformkey = array();

  if ($row = $result->fetch()){
    $noresult = False;
  }
  elseif ($row = $multiresult->fetch()){
    $noresult = False;
  }
  else{
    $query = db_select('webform_component', 'c');
    $query
      ->fields('c', array('nid', 'cid', 'pid', 'name','form_key', 'type', 'extra'))
      ->condition('c.nid', arg(1), '=')
      ->condition('c.extra', '%prim_question";a:1:{s:5:"check";i:1;}%', 'LIKE')
      ->orderBy('c.cid', 'ASC');
    $result = $query->execute();
  
    $noresult = True;
  }

  foreach ($result as $row) {
    $question = trim(str_replace('uppgift', '', $row->name), ' ');

    foreach ($row as $key => $value) {
      if($key == 'extra') {
        $extra = unserialize($value);
        $extraArr = explode("\n", $extra['items']);

        $multipleArr = explode("\n", $extra['multiple']);

        $items = array();
        $points = array();
        $noanswer = array();
        $selected = false;
        $hasvalue = false;

        if ($multipleArr[0] == 0) {

          foreach ($extraArr as $key => $value) {
            if(!empty($value)) {
              list($k, $v) = explode('|', $value);
              if (strpos($k,'+') !== false) {
                  list($k, $uk) = explode('+', $k);
                  if ($k == $uk) {
                    $k = $k.'_1';
                    $uk = $uk.'_2';
                  }

                  $items[$k] = $k;
                  $items[$uk] = $uk;


              }
              else {
                $items[$k] = $k;
              }
            }
          } // End foreach extraArr as key => value
        
          $items = array_reverse($items);

          $noarr = array('ingetsvar', 'ejsvar');
          $removechar = array(' ', '.', '!');


          foreach ($items as $key => $value) {
            if ($noresult == True) {
              $selVal = '';
            }
            else {
              $selVal = $row->data;
            }
            if (strpos($selVal,'+') !== false) {
                  list($selVal, $uselVal) = explode('+', $selVal);
                  $cleanVal = str_replace($removechar, '', strtolower($selVal));
                  if ($selVal == $uselVal) {
                    $selVal = $selVal.'_1';
                    $uselVal = $uselVal.'_2';
                  }

          
                  if(in_array($cleanVal, $noarr)) {
                    $noanswer[$key] = $value;
                  }
                  elseif($selVal == $key || $uselVal == $key || $hasvalue) {
                    $points[$key] = $value;
                    $hasvalue = true;
                  }


              }
              else {
              $cleanVal = str_replace($removechar, '', strtolower($selVal));

          
              if(in_array($cleanVal, $noarr)) {
                $noanswer[$key] = $value;
              }
              elseif($selVal == $key || $hasvalue) {
                $points[$key] = $value;
                $hasvalue = true;
              }

            }

            
          }// End foreach itema as key => value
        } 
        elseif ($multipleArr[0] == 1) {
          if (in_array( $row->form_key, $multiformkey)) {
            

          }
          else {
            foreach ($extraArr as $key => $value) {
              if(!empty($value)) {
                list($k, $v) = explode('|', $value);
                if (strpos($k,'+') !== false) {
                  list($k, $uk) = explode('+', $k);
                  $items[$k] = $k;
                  $items[$uk] = $uk;

                }
                else {
                  $items[$k] = $k;
                }
              }
              $items = array_reverse($items);
            } // End foreach extraArr as key => value
            $multiformkey[] = $row->form_key;
          }

          $items = array_reverse($items);
          
          $noarr = array('ingetsvar', 'ejsvar');
          $removechar = array(' ', '.', '!');
          if ($items == NULL) {
            if ($noresult == True) {
              $selVal = '';
            }
            else {
              $selVal = $row->data;
            }
            $points[$selVal] = $selVal;
          }

          foreach ($items as $key => $value) {
            if ($noresult == True) {
              $selVal = '';
            }
            else {
              $selVal = $row->data;
            }
            if (strpos($selVal,'_') !== false) {
              list($selVal, $unselVal) = explode('_', $selVal);
            }
            $cleanVal = str_replace($removechar, '', strtolower($selVal));

            if (strpos($key,'_') !== false) {
              list($key, $unselkey) = explode('_', $key);
            }

            if(in_array($cleanVal, $noarr)) {           
              $noanswer[$key] = $value;
            } 
            elseif($selVal == $key) {
              if (strpos($value,'_') !== false) {
              list($value, $uvalue) = explode('_', $value);
            }
              $points[$key] = $value;
            }
          }
            
        }// End foreach itema as key => value
        // DEBUG
        /*print_r("\n".'#- $question ---------#'."\n");
        print_r($question);
        print_r("\n\n".'-- $multiformArr --'."\n");
        print_r($multipleArr);
        print_r("\n".'#- $items ---------#'."\n");
        print_r($items);
        print_r("\n".'-- $row->data --'."\n");
        print_r($row->data);   
        print_r("\n".'-- $selVal --'."\n");
        print_r($selVal);
        print_r("\n\n".'-- $points --'."\n");
        print_r($points);
        print_r("\n".'-- $noanswer --'."\n");
        print_r($noanswer);*/

        $grades = assign_grades($items, $question, $grades, 'all');
        $grades = assign_grades($points, $question, $grades, 'correct');
        $grades = assign_grades($noanswer, $question, $grades, 'noanswer');

      } // End if key equals 'extra'
    } // End foreach row key
  } // End foreach result as row
  

  //Check for checkboxes which have no values selected  
  foreach ($multiresult as $row) {
    $question = trim(str_replace('uppgift', '', strtolower($row->name)), ' ');
    foreach ($row as $key => $value) {
      $pidquery = db_select('webform_component', 'c');
      $pidquery
        ->fields('c', array('extra'))
        ->condition('c.cid', $row->pid, '=')
        ->condition('c.nid', arg(1), '=');
      $pidresult = $pidquery->execute();

      foreach ($pidresult as $pidrow) {
        foreach ($pidrow as $pidkey => $pidvalue) {
          if($pidkey == 'extra') {
            $pidextra = unserialize($pidvalue);
            $pidcondition = explode("\n", $pidextra['webform_conditional_cid']);

            $condquery = db_select('webform_submitted_data', 'sd');
            $condquery
              ->fields('sd', array('data'))
              ->condition('sd.cid', $pidcondition, '=')
              ->condition('sd.nid', arg(1), '=')
              ->condition('sd.sid', arg(3), '=');
            $condresult = $condquery->execute();

            foreach ($condresult as $condrow) {
              if ($condrow->data == 1){
                if($key == 'extra') {
                  $extra = unserialize($value);
                  $extraArr = explode("\n", $extra['items']);

                  $items = array();
                  $noanswer = array();
                  $selected = false;
                  $hasvalue = false;

                  foreach ($extraArr as $key => $value) {
                    if(!empty($value)) {
                      list($k, $v) = explode('|', $value);
                      if (strpos($k,'_') !== false) {
                        list($l, $w) = explode('_', $k);
                      }
                      else {
                        $l = $k;
                      }
                      if (!in_array($k, $items)) {
                        $items[$k] = $l;
                      }
                    }
                    $items = array_reverse($items);
                  } // End foreach extraArr as key => value
                  $grades = assign_grades($items, $question, $grades, 'all');
                }
              }
            }         
          }
        }
      }
    }

  }

  $grades = count_grades('E', 'all', $grades);
  $grades = count_grades('C', 'all', $grades);
  $grades = count_grades('A', 'all', $grades);
  $grades = count_grades('E', 'correct', $grades);
  $grades = count_grades('C', 'correct', $grades);
  $grades = count_grades('A', 'correct', $grades);

  return theme('prim_teacher_result_matrix',array('grades'=>$grades, 'node'=>$node));
}

function init_grades($grades, $type) {
  $grade_chars = array('A', 'C', 'E');

  foreach ($grade_chars as $g) {
    $grades[$g.'b'][$type] = array();
    $grades[$g.'p'][$type] = array();
    $grades[$g.'pl'][$type] = array();
    $grades[$g.'m'][$type] = array();
    $grades[$g.'r'][$type] = array();
    $grades[$g.'k'][$type] = array();
  } // End foreach

  return $grades;
}

function assign_grades($items, $question, $grades, $type) {
  $grade_chars = array('A', 'C', 'E');

  foreach($items as $value) {
  if (strpos($value,'_') !== false) {
      list($value, $uvalue) = explode('_', $value);
      }
    foreach ($grade_chars as $g) {
      switch($value){
        case $g.'b':
          $grades[$g.'b'][$type][]= $question;
          break;
        case $g.'p':
          $grades[$g.'p'][$type][]= $question;
          break;
        case $g.'pl':
          $grades[$g.'pl'][$type][]= $question;
          break;
        case $g.'m':
          $grades[$g.'m'][$type][]= $question;
          break;
        case $g.'r':
          $grades[$g.'r'][$type][]= $question;
          break;
        case $g.'k':
          $grades[$g.'k'][$type][]= $question;
          break;
      } // End switch
    } // End foreach
  } // End foreach

  return $grades;
}

function count_grades($g, $type, $grades) {
  $grades[$g][$type]['count'] = (
    count($grades[$g.'b'][$type]) + 
    count($grades[$g.'p'][$type]) +
    count($grades[$g.'pl'][$type]) +
    count($grades[$g.'m'][$type]) +
    count($grades[$g.'r'][$type]) +
    count($grades[$g.'k'][$type])
  );

  return $grades;
}
